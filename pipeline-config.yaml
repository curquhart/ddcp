Resources:
  - Type: Counter
    Name: DdcpBuildNumber
    '!Alias': BuildNumberCounter
  - Type: S3Bucket
    Name: DistCfnBucket
    '!Alias': DistCfnBucket
    RequesterPays: false
    BucketPolicy:
      - Effect: Allow
        ServicePrincipals:
          - serverlessrepo.amazonaws.com
        Actions:
          - s3:GetObject
  - Type: S3Bucket
    Name: DistManagerLambdasBucket
    '!Alias': DistManagerLambdasBucket
    RequesterPays: false
    BucketPolicy:
      - Effect: Allow
        ServicePrincipals:
          - serverlessrepo.amazonaws.com
        Actions:
          - s3:GetObject
  - Type: S3Bucket
    Name: DistLambdasBucket
    '!Alias': DistLambdasBucket
    RequesterPays: true

Pipelines:
  - Name: ddcp-build
    EnableBadge: true
    Notifications:
      '!Alias': Notifications
      Slack:
        - Channel: '#builds'
          UserName: buildbot
          Statuses:
            IN_PROGRESS:
              emoji: ':cold_sweat:'
            SUCCEEDED:
              emoji: ':aw_yeah:'
            FAILED:
              emoji: ':homer:'
            STOPPED:
              emoji: ':i_dunno:'
          WebHookUrl:
            '!Secret': SlackWebHookUrl
    Sources:
      - Name: Source
        Type: Git
        Uri: git@github.com:curquhart/ddcp.git
        Auth:
          PrivateKey:
            '!Secret': GitHubMirrorPrivateKey
        Trigger: GitHubWebHook
        RepositoryName: ddcp
        BranchName: master
    Stages:
      - Name: BuildStage
        Actions:
          - Name: IncrementBuildNumber
            Type: Counter
            '!Alias': IncrementCounter
            Counter:
              '!Path':
                '!PathForAlias': BuildNumberCounter
            Operation: IncrementAndGet
            Order: 1
            OutputArtifactName: BuildNumber
          - Name: Build
            Type: CodeBuild
            Order: 2
            SourceName: Source
            InputArtifacts:
              - '!Path':
                  '!Join':
                    - '!PathForAlias': IncrementCounter
                    - - OutputArtifactName
            ComputeType: BUILD_GENERAL1_MEDIUM
            BuildSpec:
              '!Alias': BuildSpec
              Inline:
                version: 0.2
                env:
                  variables:
                    CFN_DIST_BUCKET_NAME:
                      '!Path':
                        '!Join':
                          - '!PathForAlias': DistCfnBucket
                          - - Outputs
                            - BucketName
                    LAMBDA_DIST_BUCKET_NAME:
                      '!Path':
                        '!Join':
                          - '!PathForAlias': DistLambdasBucket
                          - - Outputs
                            - BucketName
                    MANAGER_LAMBDA_DIST_BUCKET_NAME:
                      '!Path':
                        '!Join':
                          - '!PathForAlias': DistManagerLambdasBucket
                          - - Outputs
                            - BucketName
                    COVERALLS_GIT_BRANCH: master
                    ACCOUNT_NUMBER:
                      '!Param': AccountNumber
                  'secrets-manager':
                    NPM_TOKEN: 'NpmPublish:NPM_TOKEN'
                    GITHUB_USER: 'GithubPush:USERNAME'
                    GITHUB_PRIVATE_KEY: 'GitHubVersioningPrivateKey'
                    COVERALLS_REPO_TOKEN: 'CoverallsToken'
                phases:
                  install:
                    runtime-versions:
                      nodejs: 12
                      ruby: 2.6
                      python: 3.8
                    commands:
                      - gem install cfn-nag
                      - pip install cfn-lint
                      - npm install
                      - npx lerna bootstrap
                  pre_build:
                    commands:
                      - '!Script':
                          Bin: |
                            #!/usr/bin/env bash

                            set -e

                            eval $(ssh-agent -s)
                            echo "${GITHUB_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
                            mkdir -p ~/.ssh
                            chmod 0700 ~/.ssh
                            git clone git@github.com:${GITHUB_USER}/ddcp.git tmp
                            cd tmp && git fetch && git reset --hard ${CODEBUILD_RESOLVED_SOURCE_VERSION} && cd ..
                            mv tmp/.git .git
                            rm -rf tmp
                      - '!Join':
                        - 'export BUILD_NUMBER=$(cat ${CODEBUILD_SRC_DIR_'
                        - '!Path':
                            '!Join':
                              - '!PathForAlias': IncrementCounter
                              - - OutputArtifactName
                        - '}/count)'
                      - '!Join':
                          - 'export BUILD_VERSION=$('
                          - '!Script':
                              Bin: |
                                #!/usr/bin/env node

                                const fs = require('fs');

                                const bump = require(`${process.cwd()}/node_modules/standard-version/lib/lifecycles/bump`);

                                const startVersion = JSON.parse(fs.readFileSync('lerna.json').toString()).version;
                                const buildNumber = process.env.BUILD_NUMBER;
                                const [ startMajor, startMinor, startPatch ] = startVersion.split('.');

                                bump({
                                    infile: 'CHANGELOG.md',
                                    firstRelease: !fs.existsSync('CHANGELOG.md'),
                                    sign: false,
                                    noVerify: false,
                                    commitAll: false,
                                    silent: true,
                                    tagPrefix: 'v',
                                    scripts: {},
                                    skip: {},
                                    dryRun: true,
                                    gitTagFallback: true,
                                    preset: `${process.cwd()}/node_modules/conventional-changelog-conventionalcommits/index.js`,
                                    header: '# Changelog\n\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n',
                                    types: [
                                        { type: 'feat', section: 'Features' },
                                        { type: 'fix', section: 'Bug Fixes' },
                                        { type: 'chore', hidden: true },
                                        { type: 'docs', hidden: true },
                                        { type: 'style', hidden: true },
                                        { type: 'refactor', hidden: true },
                                        { type: 'perf', hidden: true },
                                        { type: 'test', hidden: true }
                                    ],
                                    preMajor: Number(startMajor) < 1,
                                    commitUrlFormat: '{{host}}/{{owner}}/{{repository}}/commit/{{hash}}',
                                    compareUrlFormat: '{{host}}/{{owner}}/{{repository}}/compare/{{previousTag}}...{{currentTag}}',
                                    issueUrlFormat: '{{host}}/{{owner}}/{{repository}}/issues/{{id}}',
                                    userUrlFormat: '{{host}}/{{user}}',
                                    releaseCommitMessageFormat: 'chore(release): {{currentTag}}',
                                    issuePrefixes: [ '#' ],
                                    packageFiles: [ 'package.json' ],
                                    bumpFiles: [ 'package.json', 'package-lock.json' ]
                                }, startVersion.replace(/-.+$/, '')).then((endVersion) => {
                                    const [ endMajor, endMinor, endPatch ] = endVersion.split('.');

                                    if (startMajor === endMajor && startMinor === endMinor && startPatch.replace(/-.+$/, '') === endPatch.replace(/-.+$/, '')) {
                                        console.log(`${endMajor}.${endMinor}.${endPatch}-beta.${buildNumber}`)
                                    }
                                    else {
                                        console.log(`${endVersion}-${buildNumber}`)
                                    }
                                }).catch((err) => {
                                    console.error(err);
                                    process.exit(1);
                                });
                          - ')'
                      - echo ${BUILD_VERSION}
                  build:
                    commands:
                      - npx lerna run build
                      - npx lerna run lint
                      - npx lerna run pack
                      - npm t
                      - npx lerna run artifact-lint
                  post_build:
                    commands:
                      - '!Script':
                          Bin: |
                            #!/usr/bin/env bash

                            set -e

                            npx coveralls < reports/coverage/lcov.info
                            LF="
                            "

                            if [[ ${CODEBUILD_BUILD_SUCCEEDING} -eq 1 ]]
                            then
                              # is head tagged? if so, we're done.
                              if [[ "$(git tag --contains HEAD)" == "" ]]
                              then
                                git config user.email "ci@chelseau.com"
                                git config user.name "DDCP CI"

                                # Update regions in README.md...
                                REGIONSTABLE="|        Region        |                    Click and Deploy                     |${LF}"
                                REGIONSTABLE="${REGIONSTABLE}| :----------------: | :----------------------------------------------------------: |${LF}"

                                for region in $(cat regions.txt)
                                do
                                    REGIONSTABLE="${REGIONSTABLE}|  **${region}**  |[![](https://img.shields.io/badge/SAR-Deploy%20Now-yellow.svg)](https://deploy.serverlessrepo.app/${region}/?app=arn:aws:serverlessrepo:${region}:${ACCOUNT_NUMBER}:applications/ddcp)|${LF}"
                                done

                                mkdir -p dist/
                                echo "${REGIONSTABLE}" > dist/regions.md
                                # Remove old
                                sed -i -n '/Deploy from SAR console/{p; :a; N; /Deploy from CLI/!ba; s/.*\n//}; p' README.md
                                # Append new
                                sed -i "/Deploy from SAR console.*/ r dist/regions.md" README.md

                                git add README.md
                                git commit -m "docs: update regions in README" || true

                                echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
                                npx lerna publish ${BUILD_VERSION} --conventional-commits --no-push --yes 2>&1 | tee /tmp/publish-results && ! grep -q "lerna ERR\|WARN" < /tmp/publish-results

                                eval $(ssh-agent -s)
                                echo "${GITHUB_PRIVATE_KEY}" | tr -d '\r' | ssh-add -

                                # separate commands because we want our tag to push even if we've fallen behind master.
                                git push origin v${BUILD_VERSION}
                                git push origin master
                              fi
                            fi

                            # Versioned artifacts
                            mkdir -p dist/lambdas/${BUILD_VERSION}
                            mkdir -p dist/manager-lambdas/${BUILD_VERSION}
                            cp packages/*/dist/@ddcp*.zip dist/lambdas/${BUILD_VERSION}
                            mv dist/lambdas/${BUILD_VERSION}/@ddcpselector.zip dist/lambdas/${BUILD_VERSION}/@ddcpsynthesizer.zip dist/lambdas/${BUILD_VERSION}/@ddcps3-resolver.zip dist/manager-lambdas/${BUILD_VERSION}
                            echo ${BUILD_VERSION} > dist/version
                artifacts:
                  secondary-artifacts:
                    Manager:
                      files:
                          - packages/manager/dist/manager.yaml
                          - LICENSE
                          - README.md
                      discard-paths: yes
                    Lambdas:
                      files:
                        - '**/*'
                      base-directory: dist/lambdas
                    ManagerLambdas:
                      files:
                        - '**/*'
                      base-directory: dist/manager-lambdas
                    BuildVersion:
                      files:
                        - dist/version
                      discard-paths: yes
                reports:
                  'test-results':
                    files:
                      - reports/junit.xml
                    discard-paths: yes
                    file-format: JunitXml
          - Name: Audit
            Type: CodeBuild
            # Perform audit AFTER publish so we can let npm update our package-locks to include proper refs to our internal deps.
            Order: 3
            SourceName: Source
            ComputeType: BUILD_GENERAL1_MEDIUM
            BuildSpec:
              Inline:
                version: 0.2
                phases:
                  install:
                    runtime-versions:
                      nodejs: 12
                    commands:
                      - npm install
                      # use npm install to update package locks.
                      - npx lerna exec npm install
                  build:
                    commands:
                      - npx audit-ci
                      - npx lerna exec $PWD/node_modules/.bin/audit-ci
      - Name: PublishStage
        Actions:
          - Name: Lambdas
            Type: S3Publish
            Order: 1
            SourceName: Lambdas
            Extract: true
            BucketArn:
              '!Path':
                '!Join':
                  - '!PathForAlias': DistLambdasBucket
                  - - Outputs
                    - BucketArn
            AccessControl: PublicRead
          - Name: ManagerLambdas
            Type: S3Publish
            Order: 1
            SourceName: ManagerLambdas
            Extract: true
            BucketArn:
              '!Path':
                '!Join':
                  - '!PathForAlias': DistManagerLambdasBucket
                  - - Outputs
                    - BucketArn
            AccessControl: PublicRead
          - Name: SamPackageAndPublish
            Type: CodeBuild
            Order: 2
            SourceName: Source
            InputArtifacts:
              - BuildVersion
              - Manager
            Policies:
              - Actions:
                  - 'serverlessrepo:CreateApplication'
                Resources:
                  - '*'
              - Actions:
                  - 'serverlessrepo:UpdateApplication'
                  - 'serverlessrepo:CreateApplicationVersion'
                  - 'serverlessrepo:PutApplicationPolicy'
                Resources:
                  - '!Join':
                      - 'arn:aws:serverlessrepo:'
                      - '*'
                      - ':'
                      - '!Param': 'AccountNumber'
                      - ':applications/ddcp'
              - Actions:
                  - 's3:PutObject'
                Resources:
                  - '!Join':
                      - '!Path':
                          '!Join':
                            - '!PathForAlias': DistCfnBucket
                            - - Outputs
                              - BucketArn
                      - '/*'
            BuildSpec:
              Inline:
                version: 0.2
                env:
                  variables:
                    CFN_DIST_BUCKET_NAME:
                      '!Path':
                        '!Join':
                          - '!PathForAlias': DistCfnBucket
                          - - Outputs
                            - BucketName
                    ACCOUNT_NUMBER:
                      '!Param': AccountNumber
                phases:
                  install:
                    runtime-versions:
                      python: 3.8
                    commands:
                      - pip3 install aws-sam-cli
                  pre_build:
                    commands:
                      - 'export BUILD_VERSION=$(cat ${CODEBUILD_SRC_DIR_BuildVersion}/version)'
                  build:
                    commands:
                      - '!Script':
                          Bin: |
                            #!/usr/bin/env bash

                            set -e

                            echo Build version: ${BUILD_VERSION}
                            mkdir -p dist/
                            sam package --s3-bucket ${CFN_DIST_BUCKET_NAME} --template ${CODEBUILD_SRC_DIR_Manager}/manager.yaml --output-template-file dist/sam.yaml

                            for region in $(cat regions.txt)
                            do
                              sam publish --semantic-version ${BUILD_VERSION} -t dist/sam.yaml --region ${region}
                              aws --region ${region} serverlessrepo put-application-policy --application-id arn:aws:serverlessrepo:${region}:${ACCOUNT_NUMBER}:applications/ddcp --statements Actions=Deploy,Principals=*,StatementId=public-access-enabled
                            done
          - Name: SamDeploy
            Type: CodeBuild
            Order: 3
            SourceName: Source
            InputArtifacts:
              - BuildVersion
            Policies:
              # TODO: restrict this to what the manager actually needs.
              - Actions:
                  - '*'
                Resources:
                  - '*'
            BuildSpec:
              Inline:
                version: 0.2
                env:
                  variables:
                    ACCOUNT_NUMBER:
                      '!Param': AccountNumber
                phases:
                  install:
                    runtime-versions:
                      python: 3.8
                  pre_build:
                    commands:
                      - 'export BUILD_VERSION=$(cat ${CODEBUILD_SRC_DIR_BuildVersion}/version)'
                  build:
                    commands:
                      - export TEMPLATE_URL=$(aws --region ${AWS_REGION} serverlessrepo create-cloud-formation-template --application-id arn:aws:serverlessrepo:${AWS_REGION}:${ACCOUNT_NUMBER}:applications/ddcp --semantic-version ${BUILD_VERSION} | jq -r .TemplateUrl)
                      - aws cloudformation update-stack --stack-name ddcp-PipelineManager-HVSH7KLRYJ9I --template-url ${TEMPLATE_URL} --parameters '[{"ParameterKey":"LocalStorageS3BucketName","UsePreviousValue":true},{"ParameterKey":"RepositoryName","UsePreviousValue":true},{"ParameterKey":"StackName","UsePreviousValue":true},{"ParameterKey":"SynthPipelineName","UsePreviousValue":true}]' --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND
                      - aws cloudformation wait stack-update-complete --stack-name ddcp-PipelineManager-HVSH7KLRYJ9I
  - Name: ddcp-branch-build
    GitHub:
      Auth:
        '!Secret': GitHubApp
      Defaults:
        Owner: curquhart
        Repo: ddcp
    Orchestrator: CloudWatch
    Notifications:
      '!Path':
        '!PathForAlias': Notifications
    Sources:
      - Name: Source
        Type: CodeCommit
        RepositoryName: ddcp
        BranchPattern: '^(?!master$)'
    Stages:
      - Name: BuildStage
        Actions:
          - Name: Build
            Type: CodeBuild
            Order: 1
            SourceName: Source
            ComputeType: BUILD_GENERAL1_MEDIUM
            BuildSpec:
              Inline:
                version:
                  '!Path':
                    '!Join':
                      - '!PathForAlias': BuildSpec
                      - - Inline
                        - version
                env:
                  variables:
                    LAMBDA_DIST_BUCKET_NAME:
                      '!Path':
                        '!Join':
                          - '!PathForAlias': DistLambdasBucket
                          - - Outputs
                            - BucketName
                    MANAGER_LAMBDA_DIST_BUCKET_NAME:
                      '!Path':
                        '!Join':
                          - '!PathForAlias': DistManagerLambdasBucket
                          - - Outputs
                            - BucketName
                phases:
                  install:
                    '!Path':
                      '!Join':
                        - '!PathForAlias': BuildSpec
                        - - Inline
                          - phases
                          - install
                  pre_build:
                    commands:
                      - export BUILD_VERSION="0.0.0-development"
                  build:
                    '!Path':
                      '!Join':
                        - '!PathForAlias': BuildSpec
                        - - Inline
                          - phases
                          - build
                reports:
                  '!Path':
                    '!Join':
                      - '!PathForAlias': BuildSpec
                      - - Inline
                        - reports
